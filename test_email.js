const nodemailer = require('nodemailer');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
const envContent = fs.readFileSync('/home/ubuntu/droneshow/app/.env', 'utf8');
const envLines = envContent.split('\n');
const env = {};

envLines.forEach(line => {
  if (line.includes('=') && !line.startsWith('#')) {
    const [key, value] = line.split('=');
    env[key] = value.replace(/"/g, '');
  }
});

console.log('EMAIL_USER:', env.EMAIL_USER);
console.log('EMAIL_PASS length:', env.EMAIL_PASS ? env.EMAIL_PASS.length : 'undefined');

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: env.EMAIL_USER,
    pass: env.EMAIL_PASS
  }
});

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail...');
transporter.verify((error, success) => {
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
  } else {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail —É—Å–ø–µ—à–Ω–æ!');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    const mailOptions = {
      from: env.EMAIL_USER,
      to: env.EMAIL_USER,
      subject: '–¢–µ—Å—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π DroneShow',
      html: `
        <h2>üöÅ –¢–µ—Å—Ç email —Å–∏—Å—Ç–µ–º—ã DroneShow</h2>
        <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</p>
        <p>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}</p>
        <p>–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Gmail —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>
      `
    };
    
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('Message ID:', info.messageId);
      }
    });
  }
});
